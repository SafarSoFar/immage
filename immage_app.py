
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
from string import printable
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Scale
from tkinter.filedialog import askopenfilename

from immage_logic import ImageProcessing


#OUTPUT_PATH = Path(__file__).parent
#ASSETS_PATH = OUTPUT_PATH / Path(r"")


#def relative_to_assets(path: str) -> Path:
    #return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("1108x685")
window.configure(bg = "#000000")




canvas = Canvas(
    window,
    bg = "#000000",
    height = 685,
    width = 1108,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

image_to_process = ImageProcessing
def import_image():
    global image_to_process
    image_to_process = ImageProcessing(img_path=askopenfilename(initialdir="/",title="Choose the image"), canvas=canvas, root_window_widget=window)
    #image_to_process.update_image_label()

canvas.place(x = 0, y = 0)
'''imported_image = PhotoImage(
    file="")
image_canvas = canvas.create_image(
    336.0,
    246.0,
    image=imported_image
)'''

'''canvas.create_text(
    86.0,
    445.0,
    anchor="nw",
    text="LSB data",
    fill="#FFFFFF",
    font=("Inter", 24 * -1)
)'''

red_filter_btn_img = PhotoImage(
    file="assets/button_1.png")
red_filter_btn = Button(
    image=red_filter_btn_img,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: image_to_process.change_image_pixels_rgb_value(r=255),
    relief="flat"
)
red_filter_btn.place(
    x=770.0,
    y=37.0,
    width=197.0,
    height=53.0
)

green_filter_btn_img = PhotoImage(
    file="assets/button_2.png")
green_filter_btn = Button(
    image=green_filter_btn_img,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: image_to_process.change_image_pixels_rgb_value(g=255),
    relief="flat"
)
green_filter_btn.place(
    x=770.0,
    y=129.0,
    width=197.0,
    height=53.0
)

blue_filter_btn_img = PhotoImage(
    file="assets/button_3.png")
blue_filter_btn = Button(
    image=blue_filter_btn_img,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: image_to_process.change_image_pixels_rgb_value(b=255),
    relief="flat"
)
blue_filter_btn.place(
    x=770.0,
    y=221.0,
    width=197.0,
    height=53.0
)

gray_code_btn_img = PhotoImage(
    file="assets/button_4.png")
gray_code_btn = Button(
    image=gray_code_btn_img,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: image_to_process.image_gray_code(),#print("button_4 clicked"),
    relief="flat"
)
gray_code_btn.place(
    x=770.0,
    y=313.0,
    width=197.0,
    height=53.0
)

lsb_data_btn_img = PhotoImage(
    file="assets/button_5.png")

def lsb_data_btn_listener():
    canvas.delete("lsb_data")
    lsb_data = image_to_process.extract_lsb_data()
    #lsb_data = bytes(lsb_data, 'utf-8').decode('ascii', 'ignore')
    
    # to write to .txt file wthout invisible symbols
    printable_lsb_data = ''.join(char for char in lsb_data if char in printable) # 
    with open("lsb.txt", "w") as f:
        f.write(printable_lsb_data)

    canvas.create_text(
        200.0,
        474.0,
        fill="#D9D9D9",
        width=300,
        text="LSB data extracted to lsb.txt file", tag="lsb_data")
    

lsb_data_btn = Button(
    image=lsb_data_btn_img,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: lsb_data_btn_listener(),
    relief="flat"
)
lsb_data_btn.place(
    x=86.0,
    y=613.0,
    width=274.0,
    height=35.66033935546875
)

change_image_btn_img = PhotoImage(
    file="assets/button_6.png")
change_image_btn = Button(
    image=change_image_btn_img,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: import_image(),
    relief="flat"
)
change_image_btn.place(
    x=86.0,
    y=37.0,
    width=158.0,
    height=36.0
)
binary_threshold_slider = Scale(from_=0, to=255,bg="black",fg="white", length=200,label="Binary treshold",highlightthickness=0, orient="horizontal", highlightcolor='white')
binary_threshold_slider.place(x=765,y=450)
def binary_threshold_slider_listener(event):
    slider_val = binary_threshold_slider.get()
    image_to_process.binary_threshold_image(slider_val)
binary_threshold_slider.bind("<ButtonRelease-1>", binary_threshold_slider_listener)
#binary_threshold_slider.configure(command=binary_threshold_slider_listener)

bit_plane_slider = Scale(from_=0, to=7, bg="black", fg="white",label="Bit plane",length=200,highlightthickness=0, orient='horizontal')
bit_plane_slider.place(x=765,y=550)
def bit_plane_slider_listener(event):
    slider_val = bit_plane_slider.get()
    image_to_process.image_bit_plane(slider_val)
bit_plane_slider.bind("<ButtonRelease-1>", bit_plane_slider_listener) 

show_original_image_btn_img = PhotoImage(
    file="assets/button_7.png")
show_original_image_btn = Button(
    image=show_original_image_btn_img,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: image_to_process.construct_show_original_image(),
    relief="flat"
)
show_original_image_btn.place(
    x=428.0,
    y=37.0,
    width=158.0,
    height=36.0
)


window.resizable(False, False)
window.mainloop()

'''def main():
    pass

if __name__ == '__main__':
    main()'''
